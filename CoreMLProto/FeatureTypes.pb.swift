// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: coremltools-master/mlmodel/format/FeatureTypes.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2017, Apple Inc. All rights reserved.
//
// Use of this source code is governed by a BSD-3-clause license that can be
// found in LICENSE.txt or at https://opensource.org/licenses/BSD-3-Clause

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// The 64-bit integer feature type.
struct CoreML_Specification_Int64FeatureType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///*
/// The double-precision floating point number feature type.
struct CoreML_Specification_DoubleFeatureType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///*
/// The string feature type.
struct CoreML_Specification_StringFeatureType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CoreML_Specification_SizeRange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lowerBound: UInt64 = 0

  /// negative value means unbound otherwise upperbound is included in range
  var upperBound: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///*
/// The image feature type.
struct CoreML_Specification_ImageFeatureType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var width: Int64 = 0

  var height: Int64 = 0

  var sizeFlexibility: CoreML_Specification_ImageFeatureType.OneOf_SizeFlexibility? = nil

  var enumeratedSizes: CoreML_Specification_ImageFeatureType.EnumeratedImageSizes {
    get {
      if case .enumeratedSizes(let v)? = sizeFlexibility {return v}
      return CoreML_Specification_ImageFeatureType.EnumeratedImageSizes()
    }
    set {sizeFlexibility = .enumeratedSizes(newValue)}
  }

  var imageSizeRange: CoreML_Specification_ImageFeatureType.ImageSizeRange {
    get {
      if case .imageSizeRange(let v)? = sizeFlexibility {return v}
      return CoreML_Specification_ImageFeatureType.ImageSizeRange()
    }
    set {sizeFlexibility = .imageSizeRange(newValue)}
  }

  var colorSpace: CoreML_Specification_ImageFeatureType.ColorSpace = .invalidColorSpace

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_SizeFlexibility: Equatable {
    case enumeratedSizes(CoreML_Specification_ImageFeatureType.EnumeratedImageSizes)
    case imageSizeRange(CoreML_Specification_ImageFeatureType.ImageSizeRange)

  #if !swift(>=4.1)
    static func ==(lhs: CoreML_Specification_ImageFeatureType.OneOf_SizeFlexibility, rhs: CoreML_Specification_ImageFeatureType.OneOf_SizeFlexibility) -> Bool {
      switch (lhs, rhs) {
      case (.enumeratedSizes(let l), .enumeratedSizes(let r)): return l == r
      case (.imageSizeRange(let l), .imageSizeRange(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// Assumes raw (decompressed) format
  enum ColorSpace: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case invalidColorSpace // = 0

    ///  8 bits per pixel
    case grayscale // = 10

    /// 32 bits per pixel: RGBA with A channel ignored
    case rgb // = 20

    /// 32 bits per pixel: BGRA with A channel ignored
    case bgr // = 30
    case UNRECOGNIZED(Int)

    init() {
      self = .invalidColorSpace
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalidColorSpace
      case 10: self = .grayscale
      case 20: self = .rgb
      case 30: self = .bgr
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .invalidColorSpace: return 0
      case .grayscale: return 10
      case .rgb: return 20
      case .bgr: return 30
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct ImageSize {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var width: UInt64 = 0

    var height: UInt64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct EnumeratedImageSizes {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var sizes: [CoreML_Specification_ImageFeatureType.ImageSize] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ImageSizeRange {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var widthRange: CoreML_Specification_SizeRange {
      get {return _widthRange ?? CoreML_Specification_SizeRange()}
      set {_widthRange = newValue}
    }
    /// Returns true if `widthRange` has been explicitly set.
    var hasWidthRange: Bool {return self._widthRange != nil}
    /// Clears the value of `widthRange`. Subsequent reads from it will return its default value.
    mutating func clearWidthRange() {self._widthRange = nil}

    var heightRange: CoreML_Specification_SizeRange {
      get {return _heightRange ?? CoreML_Specification_SizeRange()}
      set {_heightRange = newValue}
    }
    /// Returns true if `heightRange` has been explicitly set.
    var hasHeightRange: Bool {return self._heightRange != nil}
    /// Clears the value of `heightRange`. Subsequent reads from it will return its default value.
    mutating func clearHeightRange() {self._heightRange = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _widthRange: CoreML_Specification_SizeRange? = nil
    fileprivate var _heightRange: CoreML_Specification_SizeRange? = nil
  }

  init() {}
}

#if swift(>=4.2)

extension CoreML_Specification_ImageFeatureType.ColorSpace: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [CoreML_Specification_ImageFeatureType.ColorSpace] = [
    .invalidColorSpace,
    .grayscale,
    .rgb,
    .bgr,
  ]
}

#endif  // swift(>=4.2)

///*
/// The array feature type.
struct CoreML_Specification_ArrayFeatureType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var shape: [Int64] = []

  var dataType: CoreML_Specification_ArrayFeatureType.ArrayDataType = .invalidArrayDataType

  var shapeFlexibility: CoreML_Specification_ArrayFeatureType.OneOf_ShapeFlexibility? = nil

  var enumeratedShapes: CoreML_Specification_ArrayFeatureType.EnumeratedShapes {
    get {
      if case .enumeratedShapes(let v)? = shapeFlexibility {return v}
      return CoreML_Specification_ArrayFeatureType.EnumeratedShapes()
    }
    set {shapeFlexibility = .enumeratedShapes(newValue)}
  }

  var shapeRange: CoreML_Specification_ArrayFeatureType.ShapeRange {
    get {
      if case .shapeRange(let v)? = shapeFlexibility {return v}
      return CoreML_Specification_ArrayFeatureType.ShapeRange()
    }
    set {shapeFlexibility = .shapeRange(newValue)}
  }

  var defaultOptionalValue: CoreML_Specification_ArrayFeatureType.OneOf_DefaultOptionalValue? = nil

  var intDefaultValue: Int32 {
    get {
      if case .intDefaultValue(let v)? = defaultOptionalValue {return v}
      return 0
    }
    set {defaultOptionalValue = .intDefaultValue(newValue)}
  }

  var floatDefaultValue: Float {
    get {
      if case .floatDefaultValue(let v)? = defaultOptionalValue {return v}
      return 0
    }
    set {defaultOptionalValue = .floatDefaultValue(newValue)}
  }

  var doubleDefaultValue: Double {
    get {
      if case .doubleDefaultValue(let v)? = defaultOptionalValue {return v}
      return 0
    }
    set {defaultOptionalValue = .doubleDefaultValue(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ShapeFlexibility: Equatable {
    case enumeratedShapes(CoreML_Specification_ArrayFeatureType.EnumeratedShapes)
    case shapeRange(CoreML_Specification_ArrayFeatureType.ShapeRange)

  #if !swift(>=4.1)
    static func ==(lhs: CoreML_Specification_ArrayFeatureType.OneOf_ShapeFlexibility, rhs: CoreML_Specification_ArrayFeatureType.OneOf_ShapeFlexibility) -> Bool {
      switch (lhs, rhs) {
      case (.enumeratedShapes(let l), .enumeratedShapes(let r)): return l == r
      case (.shapeRange(let l), .shapeRange(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  enum OneOf_DefaultOptionalValue: Equatable {
    case intDefaultValue(Int32)
    case floatDefaultValue(Float)
    case doubleDefaultValue(Double)

  #if !swift(>=4.1)
    static func ==(lhs: CoreML_Specification_ArrayFeatureType.OneOf_DefaultOptionalValue, rhs: CoreML_Specification_ArrayFeatureType.OneOf_DefaultOptionalValue) -> Bool {
      switch (lhs, rhs) {
      case (.intDefaultValue(let l), .intDefaultValue(let r)): return l == r
      case (.floatDefaultValue(let l), .floatDefaultValue(let r)): return l == r
      case (.doubleDefaultValue(let l), .doubleDefaultValue(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  enum ArrayDataType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case invalidArrayDataType // = 0

    /// 0x10000 | 32
    case float32 // = 65568

    /// 0x10000 | 64
    case double // = 65600

    /// 0x20000 | 32
    case int32 // = 131104
    case UNRECOGNIZED(Int)

    init() {
      self = .invalidArrayDataType
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalidArrayDataType
      case 65568: self = .float32
      case 65600: self = .double
      case 131104: self = .int32
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .invalidArrayDataType: return 0
      case .float32: return 65568
      case .double: return 65600
      case .int32: return 131104
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct Shape {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var shape: [Int64] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct EnumeratedShapes {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var shapes: [CoreML_Specification_ArrayFeatureType.Shape] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ShapeRange {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// sizeRanges.size() must be length 1 or 3
    /// sizeRanges[d] specifies the allowed range for dimension d
    var sizeRanges: [CoreML_Specification_SizeRange] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

#if swift(>=4.2)

extension CoreML_Specification_ArrayFeatureType.ArrayDataType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [CoreML_Specification_ArrayFeatureType.ArrayDataType] = [
    .invalidArrayDataType,
    .float32,
    .double,
    .int32,
  ]
}

#endif  // swift(>=4.2)

///*
/// The dictionary feature type.
struct CoreML_Specification_DictionaryFeatureType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  ///  Key/value type tags, with the following restrictions:
  ///  - ``keyType`` must be a hashable type
  ///  - ``valueType`` is assumed to be a ``double``
  var keyType: CoreML_Specification_DictionaryFeatureType.OneOf_KeyType? = nil

  var int64KeyType: CoreML_Specification_Int64FeatureType {
    get {
      if case .int64KeyType(let v)? = keyType {return v}
      return CoreML_Specification_Int64FeatureType()
    }
    set {keyType = .int64KeyType(newValue)}
  }

  var stringKeyType: CoreML_Specification_StringFeatureType {
    get {
      if case .stringKeyType(let v)? = keyType {return v}
      return CoreML_Specification_StringFeatureType()
    }
    set {keyType = .stringKeyType(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  ///*
  ///  Key/value type tags, with the following restrictions:
  ///  - ``keyType`` must be a hashable type
  ///  - ``valueType`` is assumed to be a ``double``
  enum OneOf_KeyType: Equatable {
    case int64KeyType(CoreML_Specification_Int64FeatureType)
    case stringKeyType(CoreML_Specification_StringFeatureType)

  #if !swift(>=4.1)
    static func ==(lhs: CoreML_Specification_DictionaryFeatureType.OneOf_KeyType, rhs: CoreML_Specification_DictionaryFeatureType.OneOf_KeyType) -> Bool {
      switch (lhs, rhs) {
      case (.int64KeyType(let l), .int64KeyType(let r)): return l == r
      case (.stringKeyType(let l), .stringKeyType(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}
}

///*
/// The Sequence feature type.
struct CoreML_Specification_SequenceFeatureType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// Currently only categorical int64 and String sequences are supported
  var type: CoreML_Specification_SequenceFeatureType.OneOf_Type? = nil

  var int64Type: CoreML_Specification_Int64FeatureType {
    get {
      if case .int64Type(let v)? = type {return v}
      return CoreML_Specification_Int64FeatureType()
    }
    set {type = .int64Type(newValue)}
  }

  var stringType: CoreML_Specification_StringFeatureType {
    get {
      if case .stringType(let v)? = type {return v}
      return CoreML_Specification_StringFeatureType()
    }
    set {type = .stringType(newValue)}
  }

  /// Range of allowed size/length/count of sequence
  var sizeRange: CoreML_Specification_SizeRange {
    get {return _sizeRange ?? CoreML_Specification_SizeRange()}
    set {_sizeRange = newValue}
  }
  /// Returns true if `sizeRange` has been explicitly set.
  var hasSizeRange: Bool {return self._sizeRange != nil}
  /// Clears the value of `sizeRange`. Subsequent reads from it will return its default value.
  mutating func clearSizeRange() {self._sizeRange = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  ///*
  /// Currently only categorical int64 and String sequences are supported
  enum OneOf_Type: Equatable {
    case int64Type(CoreML_Specification_Int64FeatureType)
    case stringType(CoreML_Specification_StringFeatureType)

  #if !swift(>=4.1)
    static func ==(lhs: CoreML_Specification_SequenceFeatureType.OneOf_Type, rhs: CoreML_Specification_SequenceFeatureType.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.int64Type(let l), .int64Type(let r)): return l == r
      case (.stringType(let l), .stringType(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _sizeRange: CoreML_Specification_SizeRange? = nil
}

///*
/// A feature, which may be optional.
struct CoreML_Specification_FeatureType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: CoreML_Specification_FeatureType.OneOf_Type? = nil

  var int64Type: CoreML_Specification_Int64FeatureType {
    get {
      if case .int64Type(let v)? = type {return v}
      return CoreML_Specification_Int64FeatureType()
    }
    set {type = .int64Type(newValue)}
  }

  var doubleType: CoreML_Specification_DoubleFeatureType {
    get {
      if case .doubleType(let v)? = type {return v}
      return CoreML_Specification_DoubleFeatureType()
    }
    set {type = .doubleType(newValue)}
  }

  var stringType: CoreML_Specification_StringFeatureType {
    get {
      if case .stringType(let v)? = type {return v}
      return CoreML_Specification_StringFeatureType()
    }
    set {type = .stringType(newValue)}
  }

  var imageType: CoreML_Specification_ImageFeatureType {
    get {
      if case .imageType(let v)? = type {return v}
      return CoreML_Specification_ImageFeatureType()
    }
    set {type = .imageType(newValue)}
  }

  var multiArrayType: CoreML_Specification_ArrayFeatureType {
    get {
      if case .multiArrayType(let v)? = type {return v}
      return CoreML_Specification_ArrayFeatureType()
    }
    set {type = .multiArrayType(newValue)}
  }

  var dictionaryType: CoreML_Specification_DictionaryFeatureType {
    get {
      if case .dictionaryType(let v)? = type {return v}
      return CoreML_Specification_DictionaryFeatureType()
    }
    set {type = .dictionaryType(newValue)}
  }

  var sequenceType: CoreML_Specification_SequenceFeatureType {
    get {
      if case .sequenceType(let v)? = type {return v}
      return CoreML_Specification_SequenceFeatureType()
    }
    set {type = .sequenceType(newValue)}
  }

  var isOptional: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Type: Equatable {
    case int64Type(CoreML_Specification_Int64FeatureType)
    case doubleType(CoreML_Specification_DoubleFeatureType)
    case stringType(CoreML_Specification_StringFeatureType)
    case imageType(CoreML_Specification_ImageFeatureType)
    case multiArrayType(CoreML_Specification_ArrayFeatureType)
    case dictionaryType(CoreML_Specification_DictionaryFeatureType)
    case sequenceType(CoreML_Specification_SequenceFeatureType)

  #if !swift(>=4.1)
    static func ==(lhs: CoreML_Specification_FeatureType.OneOf_Type, rhs: CoreML_Specification_FeatureType.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.int64Type(let l), .int64Type(let r)): return l == r
      case (.doubleType(let l), .doubleType(let r)): return l == r
      case (.stringType(let l), .stringType(let r)): return l == r
      case (.imageType(let l), .imageType(let r)): return l == r
      case (.multiArrayType(let l), .multiArrayType(let r)): return l == r
      case (.dictionaryType(let l), .dictionaryType(let r)): return l == r
      case (.sequenceType(let l), .sequenceType(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "CoreML.Specification"

extension CoreML_Specification_Int64FeatureType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Int64FeatureType"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_Int64FeatureType, rhs: CoreML_Specification_Int64FeatureType) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_DoubleFeatureType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DoubleFeatureType"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_DoubleFeatureType, rhs: CoreML_Specification_DoubleFeatureType) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_StringFeatureType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StringFeatureType"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_StringFeatureType, rhs: CoreML_Specification_StringFeatureType) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_SizeRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SizeRange"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lowerBound"),
    2: .same(proto: "upperBound"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.lowerBound)
      case 2: try decoder.decodeSingularInt64Field(value: &self.upperBound)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lowerBound != 0 {
      try visitor.visitSingularUInt64Field(value: self.lowerBound, fieldNumber: 1)
    }
    if self.upperBound != 0 {
      try visitor.visitSingularInt64Field(value: self.upperBound, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_SizeRange, rhs: CoreML_Specification_SizeRange) -> Bool {
    if lhs.lowerBound != rhs.lowerBound {return false}
    if lhs.upperBound != rhs.upperBound {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_ImageFeatureType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ImageFeatureType"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "width"),
    2: .same(proto: "height"),
    21: .same(proto: "enumeratedSizes"),
    31: .same(proto: "imageSizeRange"),
    3: .same(proto: "colorSpace"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.width)
      case 2: try decoder.decodeSingularInt64Field(value: &self.height)
      case 3: try decoder.decodeSingularEnumField(value: &self.colorSpace)
      case 21:
        var v: CoreML_Specification_ImageFeatureType.EnumeratedImageSizes?
        if let current = self.sizeFlexibility {
          try decoder.handleConflictingOneOf()
          if case .enumeratedSizes(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.sizeFlexibility = .enumeratedSizes(v)}
      case 31:
        var v: CoreML_Specification_ImageFeatureType.ImageSizeRange?
        if let current = self.sizeFlexibility {
          try decoder.handleConflictingOneOf()
          if case .imageSizeRange(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.sizeFlexibility = .imageSizeRange(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.width != 0 {
      try visitor.visitSingularInt64Field(value: self.width, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 2)
    }
    if self.colorSpace != .invalidColorSpace {
      try visitor.visitSingularEnumField(value: self.colorSpace, fieldNumber: 3)
    }
    switch self.sizeFlexibility {
    case .enumeratedSizes(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    case .imageSizeRange(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_ImageFeatureType, rhs: CoreML_Specification_ImageFeatureType) -> Bool {
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.sizeFlexibility != rhs.sizeFlexibility {return false}
    if lhs.colorSpace != rhs.colorSpace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_ImageFeatureType.ColorSpace: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INVALID_COLOR_SPACE"),
    10: .same(proto: "GRAYSCALE"),
    20: .same(proto: "RGB"),
    30: .same(proto: "BGR"),
  ]
}

extension CoreML_Specification_ImageFeatureType.ImageSize: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = CoreML_Specification_ImageFeatureType.protoMessageName + ".ImageSize"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "width"),
    2: .same(proto: "height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.width)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.height)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.width != 0 {
      try visitor.visitSingularUInt64Field(value: self.width, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularUInt64Field(value: self.height, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_ImageFeatureType.ImageSize, rhs: CoreML_Specification_ImageFeatureType.ImageSize) -> Bool {
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_ImageFeatureType.EnumeratedImageSizes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = CoreML_Specification_ImageFeatureType.protoMessageName + ".EnumeratedImageSizes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sizes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.sizes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sizes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sizes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_ImageFeatureType.EnumeratedImageSizes, rhs: CoreML_Specification_ImageFeatureType.EnumeratedImageSizes) -> Bool {
    if lhs.sizes != rhs.sizes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_ImageFeatureType.ImageSizeRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = CoreML_Specification_ImageFeatureType.protoMessageName + ".ImageSizeRange"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "widthRange"),
    2: .same(proto: "heightRange"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._widthRange)
      case 2: try decoder.decodeSingularMessageField(value: &self._heightRange)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._widthRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._heightRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_ImageFeatureType.ImageSizeRange, rhs: CoreML_Specification_ImageFeatureType.ImageSizeRange) -> Bool {
    if lhs._widthRange != rhs._widthRange {return false}
    if lhs._heightRange != rhs._heightRange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_ArrayFeatureType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ArrayFeatureType"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "shape"),
    2: .same(proto: "dataType"),
    21: .same(proto: "enumeratedShapes"),
    31: .same(proto: "shapeRange"),
    41: .same(proto: "intDefaultValue"),
    51: .same(proto: "floatDefaultValue"),
    61: .same(proto: "doubleDefaultValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt64Field(value: &self.shape)
      case 2: try decoder.decodeSingularEnumField(value: &self.dataType)
      case 21:
        var v: CoreML_Specification_ArrayFeatureType.EnumeratedShapes?
        if let current = self.shapeFlexibility {
          try decoder.handleConflictingOneOf()
          if case .enumeratedShapes(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.shapeFlexibility = .enumeratedShapes(v)}
      case 31:
        var v: CoreML_Specification_ArrayFeatureType.ShapeRange?
        if let current = self.shapeFlexibility {
          try decoder.handleConflictingOneOf()
          if case .shapeRange(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.shapeFlexibility = .shapeRange(v)}
      case 41:
        if self.defaultOptionalValue != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.defaultOptionalValue = .intDefaultValue(v)}
      case 51:
        if self.defaultOptionalValue != nil {try decoder.handleConflictingOneOf()}
        var v: Float?
        try decoder.decodeSingularFloatField(value: &v)
        if let v = v {self.defaultOptionalValue = .floatDefaultValue(v)}
      case 61:
        if self.defaultOptionalValue != nil {try decoder.handleConflictingOneOf()}
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {self.defaultOptionalValue = .doubleDefaultValue(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.shape.isEmpty {
      try visitor.visitPackedInt64Field(value: self.shape, fieldNumber: 1)
    }
    if self.dataType != .invalidArrayDataType {
      try visitor.visitSingularEnumField(value: self.dataType, fieldNumber: 2)
    }
    switch self.shapeFlexibility {
    case .enumeratedShapes(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    case .shapeRange(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
    case nil: break
    }
    switch self.defaultOptionalValue {
    case .intDefaultValue(let v)?:
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 41)
    case .floatDefaultValue(let v)?:
      try visitor.visitSingularFloatField(value: v, fieldNumber: 51)
    case .doubleDefaultValue(let v)?:
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 61)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_ArrayFeatureType, rhs: CoreML_Specification_ArrayFeatureType) -> Bool {
    if lhs.shape != rhs.shape {return false}
    if lhs.dataType != rhs.dataType {return false}
    if lhs.shapeFlexibility != rhs.shapeFlexibility {return false}
    if lhs.defaultOptionalValue != rhs.defaultOptionalValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_ArrayFeatureType.ArrayDataType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INVALID_ARRAY_DATA_TYPE"),
    65568: .same(proto: "FLOAT32"),
    65600: .same(proto: "DOUBLE"),
    131104: .same(proto: "INT32"),
  ]
}

extension CoreML_Specification_ArrayFeatureType.Shape: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = CoreML_Specification_ArrayFeatureType.protoMessageName + ".Shape"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "shape"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt64Field(value: &self.shape)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.shape.isEmpty {
      try visitor.visitPackedInt64Field(value: self.shape, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_ArrayFeatureType.Shape, rhs: CoreML_Specification_ArrayFeatureType.Shape) -> Bool {
    if lhs.shape != rhs.shape {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_ArrayFeatureType.EnumeratedShapes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = CoreML_Specification_ArrayFeatureType.protoMessageName + ".EnumeratedShapes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "shapes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.shapes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.shapes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shapes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_ArrayFeatureType.EnumeratedShapes, rhs: CoreML_Specification_ArrayFeatureType.EnumeratedShapes) -> Bool {
    if lhs.shapes != rhs.shapes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_ArrayFeatureType.ShapeRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = CoreML_Specification_ArrayFeatureType.protoMessageName + ".ShapeRange"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sizeRanges"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.sizeRanges)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sizeRanges.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sizeRanges, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_ArrayFeatureType.ShapeRange, rhs: CoreML_Specification_ArrayFeatureType.ShapeRange) -> Bool {
    if lhs.sizeRanges != rhs.sizeRanges {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_DictionaryFeatureType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DictionaryFeatureType"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "int64KeyType"),
    2: .same(proto: "stringKeyType"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: CoreML_Specification_Int64FeatureType?
        if let current = self.keyType {
          try decoder.handleConflictingOneOf()
          if case .int64KeyType(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.keyType = .int64KeyType(v)}
      case 2:
        var v: CoreML_Specification_StringFeatureType?
        if let current = self.keyType {
          try decoder.handleConflictingOneOf()
          if case .stringKeyType(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.keyType = .stringKeyType(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.keyType {
    case .int64KeyType(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .stringKeyType(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_DictionaryFeatureType, rhs: CoreML_Specification_DictionaryFeatureType) -> Bool {
    if lhs.keyType != rhs.keyType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_SequenceFeatureType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SequenceFeatureType"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "int64Type"),
    3: .same(proto: "stringType"),
    101: .same(proto: "sizeRange"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: CoreML_Specification_Int64FeatureType?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .int64Type(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .int64Type(v)}
      case 3:
        var v: CoreML_Specification_StringFeatureType?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .stringType(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .stringType(v)}
      case 101: try decoder.decodeSingularMessageField(value: &self._sizeRange)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.type {
    case .int64Type(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .stringType(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case nil: break
    }
    if let v = self._sizeRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_SequenceFeatureType, rhs: CoreML_Specification_SequenceFeatureType) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs._sizeRange != rhs._sizeRange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreML_Specification_FeatureType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureType"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "int64Type"),
    2: .same(proto: "doubleType"),
    3: .same(proto: "stringType"),
    4: .same(proto: "imageType"),
    5: .same(proto: "multiArrayType"),
    6: .same(proto: "dictionaryType"),
    7: .same(proto: "sequenceType"),
    1000: .same(proto: "isOptional"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: CoreML_Specification_Int64FeatureType?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .int64Type(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .int64Type(v)}
      case 2:
        var v: CoreML_Specification_DoubleFeatureType?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .doubleType(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .doubleType(v)}
      case 3:
        var v: CoreML_Specification_StringFeatureType?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .stringType(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .stringType(v)}
      case 4:
        var v: CoreML_Specification_ImageFeatureType?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .imageType(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .imageType(v)}
      case 5:
        var v: CoreML_Specification_ArrayFeatureType?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .multiArrayType(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .multiArrayType(v)}
      case 6:
        var v: CoreML_Specification_DictionaryFeatureType?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .dictionaryType(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .dictionaryType(v)}
      case 7:
        var v: CoreML_Specification_SequenceFeatureType?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .sequenceType(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .sequenceType(v)}
      case 1000: try decoder.decodeSingularBoolField(value: &self.isOptional)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.type {
    case .int64Type(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .doubleType(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .stringType(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .imageType(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .multiArrayType(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .dictionaryType(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    case .sequenceType(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    case nil: break
    }
    if self.isOptional != false {
      try visitor.visitSingularBoolField(value: self.isOptional, fieldNumber: 1000)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreML_Specification_FeatureType, rhs: CoreML_Specification_FeatureType) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.isOptional != rhs.isOptional {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
